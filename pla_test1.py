import numpy as np
from math import *
from random import *
from icecream import ic

text = '—è –¥–µ–ª–∞—é –ª–∞–±—É'

myOwnMatrix2x2 = [[25, 2], [1, 3]]
myOwnMatrix3x3 = [[1, 4, 2], [7, 2, 8], [4, 9, 5]]
myOwnMatrix4x4 = [[1, 3, 5, 6], [8, 11, 13, 7], [1, 2, 4, 3], [5, 1, 0, 2]]

# –ø–æ —É—Å–ª–æ–≤–∏—é –ø—É–Ω–∫—Ç–∞ 3 –º–∞—Ç—Ä–∏—Ü—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å —Ä–∞–∑–Ω—ã–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–∏, –±—ã—Ç—å –æ–±—Ä–∞—Ç–∏–º—ã–º–∏ –∏ –Ω–µ –∏–º–µ—Ç—å –æ–±—â–∏—Ö –¥–µ–ª–∏—Ç–µ–ª–µ–π —Å n=35
inverted_myOwnMatrix2x2 = np.linalg.inv([[25, 2], [1, 3]])
inverted_myOwnMatrix3x3 = np.linalg.inv([[1, 4, 2], [7, 2, 8], [4, 9, 5]])
inverted_myOwnMatrix4x4 = np.linalg.inv([[1, 3, 5, 6], [8, 11, 13, 7], [1, 2, 4, 3], [5, 1, 0, 2]])


# ic(np.linalg.det(myOwnMatrix2x2))
# ic(np.linalg.det(myOwnMatrix3x3))
# ic(np.linalg.det(myOwnMatrix4x4))
# print()

# ic(inverted_myOwnMatrix2x2)
# ic(inverted_myOwnMatrix3x3)
# ic(inverted_myOwnMatrix4x4)


def alphabet_index(text):
    ''' –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π –ø–∞—Ä (–±—É–∫–≤–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞; –∏–Ω–¥–µ–∫—Å –±—É–∫–≤—ã –ø–æ –Ω–∞—à–µ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É) | 
    str: —è –¥–µ–ª–∞—é –ª–∞–±—É  ---> list[tuple]: [('—è', 32), ... ,(' ', 33), ('–±', 1), ('—É', 20)]'''
    letter_text = [i for i in text]  # ['—è', ' ', '–±', '–æ', '—Ç', '–∞', '—é', ' ', '–ª', '–∞', '–±', '—É']
    alphabet = '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è 1'  # –Ω–∞—à –∞–ª—Ñ–∞–≤–∏—Ç –∏–∑ 33 –±—É–∫–≤ + –ø—Ä–æ–±–µ–ª–∞ + 1 (–º–æ–∂–Ω–æ –∑–∞–∫–∞—Å—Ç–æ–º–∏—Ç—å –¥–æ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞)
    indecies = [i for i in range(0, 35)]  # [0, 1, ..., 33, 34]
    global alpha_indecies
    alpha_indecies = list(zip(alphabet, indecies))
    
    
    indexed_text = []
    # —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –±—É–∫–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–Ω–¥–µ–∫—Å–æ–≤ –Ω–∞—à–µ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞
    for bukva in letter_text:
        for cifra in alpha_indecies:
            if bukva == cifra[0]:  
                indexed_text.append(cifra)
    return indexed_text
# ic(alphabet_index(text))  # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏



def mod35(multiplication):  
    '''–§—É–Ω–∫—Ü–∏—è "–æ–±—Ä–µ–∑–∞–µ—Ç" –∑–Ω–∞—á–µ–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã –ø–æ –º–æ–¥—É–ª—é 35 (–º–æ—â–Ω–æ—Å—Ç—å –Ω–∞—à–µ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞)'''
    return [int(i%35) for i in multiplication]


def encr2(matrix, messages_by_2):
    '''–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ C = KP, –≥–¥–µ –° - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –ö - –∫–ª—é—á-–º–∞—Ç—Ä–∏—Ü–∞, –† - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ—Ä–µ—Ç K=2x2, P=[a,b], –≥–¥–µ [a,b] - 2 –±—É–∫–≤—ã —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ –º–∞—Ç—Ä–∏—Ü—É 2—Ö2)'''
    K2x2_matrix = np.array(matrix)
    encrypted_by_2 = []
    
    for msg in messages_by_2:
        P_matrix = np.array(msg)
        multiplication = np.dot(K2x2_matrix, P_matrix)
        encrypted_by_2.append(mod35(multiplication))
    return encrypted_by_2


def encr3(matrix, messages_by_3):
    '''–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ C = KP, –≥–¥–µ –° - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –ö - –∫–ª—é—á-–º–∞—Ç—Ä–∏—Ü–∞, –† - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ—Ä–µ—Ç K=3x3, P=[a,b,c], –≥–¥–µ [a,b,c] - 3 –±—É–∫–≤—ã —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 3 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ –º–∞—Ç—Ä–∏—Ü—É 3—Ö3)'''
    K3x3_matrix = np.array(matrix)
    encrypted_by_3 = []
    
    for msg in messages_by_3:
        P_matrix = np.array(msg)
        multiplication = np.dot(K3x3_matrix, P_matrix)
        encrypted_by_3.append(mod35(multiplication))
    return encrypted_by_3


def encr4(matrix, messages_by_4):
    '''–§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ñ–æ—Ä–º—É–ª–µ C = KP, –≥–¥–µ –° - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ, –ö - –∫–ª—é—á-–º–∞—Ç—Ä–∏—Ü–∞, –† - –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ—Ä–µ—Ç K=4x4, P=[a,b,c,d], –≥–¥–µ [a,b,c,d] - 4 –±—É–∫–≤—ã —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 4 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è —É–º–Ω–æ–∂–µ–Ω–∏—è –Ω–∞ –º–∞—Ç—Ä–∏—Ü—É 4—Ö4)'''
    K4x4_matrix = np.array(matrix)
    encrypted_by_4 = []
    
    for msg in messages_by_4:
        P_matrix = np.array(msg)
        multiplication = np.dot(K4x4_matrix, P_matrix)
        encrypted_by_4.append(mod35(multiplication))
    return encrypted_by_4


def just_indecies(text):
    '''–§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç –∏–Ω–¥–µ–∫—Å—ã –∫–∞–∂–¥–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞—à–µ–º—É –∞–ª—Ñ–∞–≤–∏—Ç—É. str: a–±–≤–≥ ---> list: [0, 1, 2, 3]'''
    msg = alphabet_index(text)
    indecies = []
    for i in msg:
        indecies.append(i[1])
    return indecies
# ic(just_indecies(text))  # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

def devide(matrix2, matrix3, matrix4, msg):
    '''–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ 12 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 2, 3 –∏ 4 —Å–∏–º–≤–æ–ª–∞, —á—Ç–æ–±—ã —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±—ã–ª–æ –≤–æ–∑–º–æ–∂–Ω—ã–º. str: abcdefghigkl ---> tuple(list, list, list): ([[a, b], ..., [k, l]], [[a, b, c], ..., [g, k, l]], [[a, b, c, d], ..., [i, g, k, l]])'''
    indecies = []
    for i in msg:
        indecies.append(i[1])
    messages_by_2 = [indecies[0:2], indecies[2:4], indecies[4:6], indecies[6:8], indecies[8:10], indecies[10:12]]
    messages_by_3 = [indecies[0:3], indecies[3:6], indecies[6:9], indecies[9:12]]
    messages_by_4 = [indecies[0:4], indecies[4:8], indecies[8:12]]  # [[32, 33, 1, 15], [19, 0, 31, 33], [12, 0, 1, 20]]
    return encr2(matrix2, messages_by_2), encr3(matrix3, messages_by_3), encr4(matrix4, messages_by_4)
# ic(devide(text))  # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏

def devide_inv(matrix2, matrix3, matrix4, msg):
    '''–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç –Ω–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ 12 —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ 2, 3 –∏ 4 —Å–∏–º–≤–æ–ª–∞, —á—Ç–æ–±—ã —É–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ –º–∞—Ç—Ä–∏—Ü—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –±—ã–ª–æ –≤–æ–∑–º–æ–∂–Ω—ã–º. str: abcdefghigkl ---> tuple(list, list, list): ([[a, b], ..., [k, l]], [[a, b, c], ..., [g, k, l]], [[a, b, c, d], ..., [i, g, k, l]])'''
    indecies = []
    for i in msg:
        indecies.append(i[1])
    messages_by_2 = [indecies[0:2], indecies[2:4], indecies[4:6], indecies[6:8], indecies[8:10], indecies[10:12]]
    messages_by_3 = [indecies[0:3], indecies[3:6], indecies[6:9], indecies[9:12]]
    messages_by_4 = [indecies[0:4], indecies[4:8], indecies[8:12]]  # [[32, 33, 1, 15], [19, 0, 31, 33], [12, 0, 1, 20]]
    return messages_by_2, messages_by_3, messages_by_4


def coded_troika(matrix2, matrix3, matrix4, tpl):
    return encr2(matrix2, tpl[0]), encr3(matrix3, tpl[1]), encr4(matrix4, tpl[2])
    
def full_split(matrix2, matrix3, matrix4, num, text):
    '''–§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–¥–µ–ª—è–µ—Ç tuple(list, list, list) –≤ list, list, list, –ø—Ä–∏—á–µ–º, –∏—Å—Ö–æ–¥–Ω—ã–µ —Å–ø–∏—Å–∫–∏ - –¥–≤—É–º–µ—Ä–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã, —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–µ —Å–ø–∏—Å–∫–∏ - –≤–µ–∫—Ç–æ—Ä—ã'''
    encrypted_lists = devide(matrix2, matrix3, matrix4, alphabet_index(text))
    # ic(encrypted_lists)
    if num == 2:
        
        full_split2 = encrypted_lists[0]
        splitted_2 = []
        for i in full_split2:
            splitted_2 = splitted_2 + i
        return splitted_2
    
    if num == 3:
        full_split3 = encrypted_lists[1]
        splitted_3 = []
        for i in full_split3:
            splitted_3 = splitted_3 + i
        return splitted_3
    
    if num == 4:
        full_split4 = encrypted_lists[2]
        splitted_4 = []
        for i in full_split4:
            splitted_4 = splitted_4 + i
        return splitted_4
# ic(full_split(4, text))  # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏


def anti_alphabetic_index(matrix2, matrix3, matrix4, num, text):
    '''–§—É–Ω–∫—Ü–∏—è (–≤—Ä–æ–¥–µ –∫–∞–∫) –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤–∏–∏ —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏ –µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤'''
    splitted = full_split(matrix2, matrix3, matrix4, num, text)
    # ic(splitted)
    res_msg = []
    
    for index in splitted:
        for bukva in alpha_indecies:
            if index == bukva[1]:
                res_msg.append(bukva[0])
    
    # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –±—É–∫–≤
    res_str = ''
    for i in res_msg:
        res_str += i
    
    return res_str
# ic(anti_alphabetic_index(2, text))  # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏


# "Ctrl + F; myOwnMatrix2x2 -> random2x2()" –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–Ω–¥–æ–º–Ω—ã–º–∏ –º–∞—Ç—Ä–∏—Ü–∞–º–∏ (–µ—Å—Ç—å —Ä–∏—Å–∫ –Ω–µ –∏—Å–ø–æ–ª–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏–µ 3; —Å–º. –∫–æ–º–º–µ–Ω–∞—Ç—Ä–∏–π –∫ –±–ª–æ–∫—É —Ñ—É–Ω–∫—Ü–∏–π —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö –º–∞—Ç—Ä–∏—Ü –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ vvv)
def task1_4():
    '''–§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–ø—É–Ω–∫—Ç 4 –∑–∞–¥–∞–Ω–∏—è 1: –ó–∞—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 12 —Å–∏–º–≤–æ–ª–æ–≤ —Ç—Ä–µ–º—è –∫–ª—é—á–∞–º–∏-–º–∞—Ç—Ä–∏—Ü–∞–º–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ 2—Ö2, 3—Ö3 –∏ 4—Ö4, –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ—á–µ–∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞'''
    kleshe_matrix = ' üóùÔ∏è  –ö–ª—é—á-–º–∞—Ç—Ä–∏—Ü–∞'
    kleshe_answer = '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ 12 —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–º-–º–∞—Ç—Ä–∏—Ü–µ–π'
    
    # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—ã–≤–æ–¥–∞ –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    answ = f'ü§ñ –î–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {text}\n\n–í–∞—à —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã –≤–∞—à–µ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ (–±—É–∫–≤–∞; –∏–Ω–¥–µ–∫—Å): {alphabet_index(text)}\n\n–í–∞—à —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å—ã –≤–∞—à–µ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞: {just_indecies(text)}\n{kleshe_matrix} —Ä–∞–∑–º–µ—Ä–∞ 2—Ö2: {myOwnMatrix2x2}\n{kleshe_matrix} —Ä–∞–∑–º–µ—Ä–∞ 3—Ö3: {myOwnMatrix3x3}\n{kleshe_matrix} —Ä–∞–∑–º–µ—Ä–∞ 4—Ö4: {myOwnMatrix4x4}\n\n{kleshe_answer}:\n   üìå 2—Ö2: {anti_alphabetic_index(myOwnMatrix2x2, myOwnMatrix3x3, myOwnMatrix4x4, 2, text)}\n   üìå 3—Ö3: {anti_alphabetic_index(myOwnMatrix2x2, myOwnMatrix3x3, myOwnMatrix4x4, 3, text)}\n   üìå 4—Ö4: {anti_alphabetic_index(myOwnMatrix2x2, myOwnMatrix3x3, myOwnMatrix4x4, 4, text)}'''
    return answ


# –±–ª–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π, –≥–µ–Ω–µ—Ä–∏—Ä—É—é—â–∏—Ö —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –º–∞—Ç—Ä–∏—Ü—ã 2—Ö2, 3—Ö3 –∏ 4—Ö4 (–≤ –æ–±—â–µ–º —Å–ª—É—á–∞–µ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –≤–µ–¥—å –Ω–µ —Å–æ–±–ª—é–¥–∞–µ—Ç—Å—è –ø—É–Ω–∫—Ç 3 –∑–∞–¥–∞–Ω–∏—è 1: –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–∏ –º–∞—Ç—Ä–∏—Ü-–∫–ª—é—á–µ–π –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–±—â–∏—Ö –¥–µ–ª–∏—Ç–µ–ª–µ–π —Å —á–∏—Å–ª–æ–º n=35 + –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–ª–∏—á–∞—Ç—å—Å—è)
# def ri(a, b):
#     return randint(a, b)

# def random2x2():
#     return [[ri(0, 35), ri(0, 35)], [ri(0, 35), ri(0, 35)]]

# def random3x3():
#     return [[ri(0, 35), ri(0, 35), ri(0, 35)], [ri(0, 35), ri(0, 35), ri(0, 35)],[ri(0, 35), ri(0, 35), ri(0, 35)]]

# def random4x4():
    return [[ri(0, 35), ri(0, 35), ri(0, 35), ri(0, 35)], [ri(0, 35), ri(0, 35), ri(0, 35)],[ri(0, 35), ri(0, 35), ri(0, 35)],[ri(0, 35), ri(0, 35), ri(0, 35), ri(0, 35)]]
    # –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø–æ —Å—Ç—Ä–æ—á–Ω–æ, (–∫—Ä–∞—Å–∏–≤–æ, –Ω–æ –Ω–µ–ø—Ä–∞–∫—Ç–∏—á–Ω–æ)
    # return f'{[ri(0, 35), ri(0, 35), ri(0, 35), ri(0, 35)]}\n{[ri(0, 35), ri(0, 35), ri(0, 35), ri(0, 35)]}\n{[ri(0, 35), ri(0, 35), ri(0, 35)]}\n{[ri(0, 35), ri(0, 35), ri(0, 35), ri(0, 35)]}'

# ic(task1_4())  # —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—ã–≤–æ–¥ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏


# —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –≥–æ—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ 12 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –Ω–∞—à–µ–≥–æ –∞–ª—Ñ–∞–≤–∏—Ç–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Å—Ç—Ä–æ–∫—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å –ø–æ–º–æ—â—å—é input()
text = '—è –¥–µ–ª–∞—é –ª–∞–±—É'
# text = input('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–π –≤ 12 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ –∞–ª—Ñ–∞–≤–∏—Ç–∞ {–∞-—è, "–ø—Ä–æ–±–µ–ª–∞", "1": ')
# ic(task1_4())


# –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ä–∞–∑–Ω—ã–º –∫—É—Å–∫–∞–º –∫–æ–¥–∞ 
# (–≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫ —Ñ—É–Ω–∫—Ü–∏—è–º). –≤—ã–≤–æ–¥ —Å–¥–µ–ª–∞–Ω —Å–∏–º–ø–∞—Ç–∏—á–Ω—ã–º



def decode():
    '''–§—É–Ω–∫—Ü–∏—è –±–µ—Ä–µ—Ç 3 –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏, —É–º–Ω–æ–∂–∞–µ—Ç –∫–∞–∂–¥—É—é –Ω–∞ –æ–±—Ä–∞—Ç–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É 2—Ö2, 3—Ö3, 4—Ö4, –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ –∫ —Å—Ç—Ä–æ–∫–∞–º'''
    # –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    coded_str2 = anti_alphabetic_index(myOwnMatrix2x2, myOwnMatrix3x3, myOwnMatrix4x4, 2, text)
    coded_str3 = anti_alphabetic_index(myOwnMatrix2x2, myOwnMatrix3x3, myOwnMatrix4x4, 3, text)
    coded_str4 = anti_alphabetic_index(myOwnMatrix2x2, myOwnMatrix3x3, myOwnMatrix4x4, 4, text)
    ic(coded_str2)
    ic(coded_str3)
    ic(coded_str4)

    str2_alphabeted = alphabet_index(coded_str2)
    str3_alphabeted = alphabet_index(coded_str3)
    str4_alphabeted = alphabet_index(coded_str4)
    ic(str2_alphabeted)
    ic(str3_alphabeted)
    ic(str4_alphabeted)
    
    # str2_indecies = just_indecies(coded_str2)
    # str3_indecies = just_indecies(coded_str3)
    # str4_indecies = just_indecies(coded_str4)
    # ic(str2_indecies)
    # ic(str3_indecies)
    # ic(str4_indecies)
    
    str2_devided_inv = devide_inv(inverted_myOwnMatrix2x2, inverted_myOwnMatrix3x3, inverted_myOwnMatrix4x4, str2_alphabeted)[0]
    str3_devided_inv = devide_inv(inverted_myOwnMatrix2x2, inverted_myOwnMatrix3x3, inverted_myOwnMatrix4x4, str3_alphabeted)[1]
    str4_devided_inv = devide_inv(inverted_myOwnMatrix2x2, inverted_myOwnMatrix3x3, inverted_myOwnMatrix4x4, str4_alphabeted)[2]
    ic(str2_devided_inv)
    ic(str3_devided_inv)
    ic(str4_devided_inv)
    
    
    # str2_indecies = devide(str2)[0]
    # str3_indecies = devide(str3)[1]
    # str4_indecies = devide(str4)[2]
    # ic(str2_indecies)
    # ic(str3_indecies)
    # ic(str4_indecies)
    
    # str2_decoded = encr2(inverted_myOwnMatrix2x2, str2_indecies)
    # str3_decoded = encr3(inverted_myOwnMatrix3x3, str3_indecies)
    # str4_decoded = encr4(inverted_myOwnMatrix4x4, str4_indecies)
    
    
    # ic(str2_decoded)
    # ic(str3_decoded)
    # ic(str4_decoded)
    
    # ic(str2_full_split)


ic(decode())